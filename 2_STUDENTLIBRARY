2. Database Schema for a Student Library scenario
Student(Stud_no : integer, Stud_name: string)
Membership(Mem_no: integer, Stud_no: integer)
Book(book_no: integer, book_name:string, author: string)
Iss_rec(iss_no:integer, iss_date: date, Mem_no: integer, book_no: integer)
For the above schema, perform the followingâ€”
Create the tables with the appropriate integrity constraints
a) Insert around 10 records in each of the tables
b) List all the student names with their membership numbers
c) List all the issues for the current date with student and Book names
d) List the details of students who borrowed book whose author is CJDATE
e) Give a count of how many books have been bought by each student
f) Give a list of books taken by student with stud_no as 5
g) Create a view which lists out the iss_no, iss _date, stud_name, book name
h) Create a view which lists the daily issues-date wise for the last one week
a) Insert around 10 records in each of the tables


CREATE DATABASE PRACTICAL2;
USE PRACTICAL2;
CREATE TABLE Student (
    Stud_no INTEGER PRIMARY KEY,
    Stud_name VARCHAR(50) NOT NULL
);

CREATE TABLE Membership (
    Mem_no INTEGER PRIMARY KEY,
    Stud_no INTEGER,
    FOREIGN KEY (Stud_no) REFERENCES Student(Stud_no)
);

CREATE TABLE Book (
    book_no INTEGER PRIMARY KEY,
    book_name VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL
);

CREATE TABLE Iss_rec (
    iss_no INTEGER PRIMARY KEY,
    iss_date DATE,
    Mem_no INTEGER,
    book_no INTEGER,
    FOREIGN KEY (Mem_no) REFERENCES Membership(Mem_no),
    FOREIGN KEY (book_no) REFERENCES Book(book_no)
);
-- Inserting records into Student table
INSERT INTO Student (Stud_no, Stud_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David'),
(5, 'Emma'),
(6, 'Frank'),
(7, 'Grace'),
(8, 'Henry'),
(9, 'Ivy'),
(10, 'Jack');

-- Inserting records into Membership table
INSERT INTO Membership (Mem_no, Stud_no) VALUES
(101, 1),
(102, 2),
(103, 3),
(104, 4),
(105, 5),
(106, 6),
(107, 7),
(108, 8),
(109, 9),
(110, 10);

-- Inserting records into Book table
INSERT INTO Book (book_no, book_name, author) VALUES
(201, 'Book1', 'Author1'),
(202, 'Book2', 'Author2'),
(203, 'Book3', 'Author3'),
(204, 'Book4', 'Author4'),
(205, 'Book5', 'Author5'),
(206, 'Book6', 'Author6'),
(207, 'Book7', 'CJDATE'),
(208, 'Book8', 'Author8'),
(209, 'Book9', 'CJDATE'),
(210, 'Book10', 'Author10');

-- Inserting records into Iss_rec table
-- Assuming today's date is '2024-04-30'
INSERT INTO Iss_rec (iss_no, iss_date, Mem_no, book_no) VALUES
(301, '2024-04-30', 101, 201),
(302, '2024-04-30', 102, 202),
(303, '2024-04-30', 103, 203),
(304, '2024-04-30', 104, 204),
(305, '2024-04-30', 105, 205),
(306, '2024-04-30', 106, 206),
(307, '2024-04-30', 107, 207),
(308, '2024-04-30', 108, 208),
(309, '2024-04-30', 109, 209),
(310, '2024-04-30', 110, 210);


b) List all the student names with their membership numbers
SELECT s.Stud_name, m.Mem_no
FROM Student s
INNER JOIN Membership m ON s.Stud_no = m.Stud_no;


c) List all the issues for the current date with student and Book names
SELECT s.Stud_name, b.book_name
FROM Student s
INNER JOIN Membership m ON s.Stud_no = m.Stud_no
INNER JOIN Iss_rec i ON m.Mem_no = i.Mem_no
INNER JOIN Book b ON i.book_no = b.book_no
WHERE i.iss_date = '2024-04-30';


d) List the details of students who borrowed book whose author is CJDATE
SELECT DISTINCT s.*
FROM Student s
INNER JOIN Membership m ON s.Stud_no = m.Stud_no
INNER JOIN Iss_rec i ON m.Mem_no = i.Mem_no
INNER JOIN Book b ON i.book_no = b.book_no
WHERE b.author = 'CJDATE';


e) Give a count of how many books have been bought by each student
SELECT s.Stud_name, COUNT(i.iss_no) AS books_borrowed
FROM Student s
INNER JOIN Membership m ON s.Stud_no = m.Stud_no
INNER JOIN Iss_rec i ON m.Mem_no = i.Mem_no
GROUP BY s.Stud_name;


f) Give a list of books taken by student with stud_no as 5
SELECT b.*
FROM Student s
INNER JOIN Membership m ON s.Stud_no = m.Stud_no
INNER JOIN Iss_rec i ON m.Mem_no = i.Mem_no
INNER JOIN Book b ON i.book_no = b.book_no
WHERE s.Stud_no = 5;


g) Create a view which lists out the iss_no, iss _date, stud_name, book name
CREATE VIEW Issued_Books AS
SELECT i.iss_no, i.iss_date, s.Stud_name, b.book_name
FROM Iss_rec i
INNER JOIN Membership m ON i.Mem_no = m.Mem_no
INNER JOIN Student s ON m.Stud_no = s.Stud_no
INNER JOIN Book b ON i.book_no = b.book_no;


h) Create a view which lists the daily issues-date wise for the last one week
CREATE VIEW Last_Week_Issues AS
SELECT i.*
FROM Iss_rec i
WHERE i.iss_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 WEEK) AND CURDATE();

SELECT * FROM Last_Week_Issues;

